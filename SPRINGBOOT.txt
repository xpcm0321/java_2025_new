■ STEP1. project
   - enc UTF-8
   - project

     연습) boot002 project 만들기   


spring dev-프로젝트 수정된 내용 빈영
spring lombok- dto, @Entity, getter/setter, default 생성자 만들어줌
jpa, h2, mysql - db
thymeleaf - html로 변경

■ STEP2. setting (properties)
- application.properties
>> before
#####################################
##			boot SETTING		   ##
#####################################
# WebApplication


# Banner

# DataSource

# Jpa Setting

# Logging

# Thymeleaf

- dto(lombok)



     연습) boot002 project 만들기
	 1) application.properties 설정
	    context-path=/boot2
	    포트번호 8282
	    application-type=web으로 설정
	 2) @Controller @ResponseBody 설정해서
	    localhost:8282/boot2/ex1 접속시 - springboot 출력

	 3) @Controller 설정해서
	    RequestMapping("/ex2") - model 설정 test, ex2
	    localhost:8282/boot2/ex2 접속시 - model에서 설정한 ex2출력

■ STEP3. db
- jpa
	1) applicaton.properties
	2) @Entity - Dto / 테이블만들기
	3) @Repository - Dao

- ex)
	1) @Entity 이용해서 Member 테이블만들기
	2) @Repository 이용해서 MemberRepository

mysql> desc member;
+-------------+--------------+------+-----+---------+----------------+
| Field       | Type         | Null | Key | Default | Extra          |
+-------------+--------------+------+-----+---------+----------------+
| id          | bigint       | NO   | PRI | NULL    | auto_increment |
| age         | int          | NO   |     | NULL    |                |
| create_date | datetime(6)  | YES  |     | NULL    |                |
| name        | varchar(255) | NO   |     | NULL    |                |
| team_id     | bigint       | YES  | MUL | NULL    |                |
+-------------+--------------+------+-----+---------+----------------+
5 rows in set (0.00 sec)


■ STEP4. view
1. pom.xml 셋팅확인
■ STEP4. view
1. pom.xml 셋팅확인
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>
<!--  https://mvnrepository.com/artifact/nz.net.ultraq.thymeleaf/thymeleaf-layout-dialect  -->
<!--  추가  -->
<dependency>
<groupId>nz.net.ultraq.thymeleaf</groupId>
<artifactId>thymeleaf-layout-dialect</artifactId>
</dependency>
<!--  추가  -->

2. application.properties 설정확인
# Thymeleaf settings
spring.thymeleaf.cache=false
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

3. layout
4. 화면설정

연습) boot002 테스트
	1. pom.xml 설정
	2. application.properties 셋팅
	3. fragments 폴더안에 : bootstrap 가서 원하는 nav 선택 - header.html
	4. fragments 폴더안에 : footer.html 설정
	5. fragments 폴더안에 : layout 설정
	6. test.html 파일만들어서 layout 나오는지 확인
	localhost:8282/boot2/test


■ STEP5. board
>> Query
https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html#jpa.query-methods.query-creation


>> Table
Member
mysql> desc member;
+-------------+--------------+------+-----+---------+----------------+
| Field       | Type         | Null | Key | Default | Extra          |
+-------------+--------------+------+-----+---------+----------------+
| id          | bigint       | NO   | PRI | NULL    | auto_increment |
| age         | int          | NO   |     | NULL    |                |
| create_date | datetime(6)  | YES  |     | NULL    |                |
| name        | varchar(255) | YES  |     | NULL    |                |
+-------------+--------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)

Board
mysql> desc board;
+-------------+--------------+------+-----+---------+----------------+
| Field       | Type         | Null | Key | Default | Extra          |
+-------------+--------------+------+-----+---------+----------------+
| id          | bigint       | NO   | PRI | NULL    | auto_increment |
| bcontent    | text         | YES  |     | NULL    |                |
| bfile       | varchar(255) | YES  |     | NULL    |                |
| bhit        | bigint       | YES  |     | NULL    |                |
| bip         | varchar(255) | YES  |     | NULL    |                |
| bpass       | varchar(255) | YES  |     | NULL    |                |
| btitle      | varchar(200) | YES  |     | NULL    |                |
| create_date | datetime(6)  | YES  |     | NULL    |                |
| member_id   | bigint       | YES  | MUL | NULL    |                |
+-------------+--------------+------+-----+---------+----------------+
9 rows in set (0.00 sec)

■ STEP6. security
1. spring security?

1) 애플리케이션의 보안(인증, 인가) 담당
2) filter의 흐름에 따라 처리

2. 인증 vs 인가
1) 인증 - 본인이 맞는지 확인      여권) - 본인이 맞는지 인증
2) 인가 - 인증된 사용자가 어디까지 접근가능한지    조종석까지 가기(X) 접근권한이 없어서

3. spring security 아키텍쳐 (1)
1) 사용자가 로그인폼 로그인시도 (username + password 전달)
2) UsernamePasswordAuthentication 요청정보 - Authentication 생성
3) Authentication 인증처리

10) 인증완료 (사용자정보) SecurityContextHolder에 담기
   - AuthenticationSuccessHandler 성공!
   - AuthenticationFailureHandler 실패!

3. spring security 아키텍쳐 (2)
4) Authentication Manager 인증담당
  - UsernamePasswordAuthentication Token 은 Provider를 찾는데 사용
5) AuthenticationProvider - 로그인정보와 db정보를 비교
6) UserDetailService - db에 있는 사용자 정보 가져오기

[실습]
1. spring project > pom.xml
   ex) board 만들었었던 project에 security 추가
2. localhost:8080/login   로그인창 -> 인증 (본인확인)
3. SecurityConfig.java - 설정
4. Member - @Entity
5. MemberRepository - crud(Dao)
6. MemberService
7. Controller
8. View